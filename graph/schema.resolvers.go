package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"
	"log"
	"strconv"

	"github.com/htanmo/hackernews/graph/model"
	"github.com/htanmo/hackernews/internal/auth"
	"github.com/htanmo/hackernews/internal/jwt"
	"github.com/htanmo/hackernews/internal/links"
	"github.com/htanmo/hackernews/internal/users"
	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5/pgconn"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model.Link, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return &model.Link{}, fmt.Errorf("access denied")
	}
	var link links.Link
	link.Title = input.Title
	link.Address = input.Address
	link.User = user
	linkID := link.Save(ctx)
	graphqlUser := &model.User{
		ID:   user.ID,
		Name: user.Username,
	}
	return &model.Link{
		ID:      strconv.FormatInt(linkID, 10),
		Title:   link.Title,
		Address: link.Address,
		User:    graphqlUser,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	if len(user.Username) == 0 {
		return "", fmt.Errorf("username cannot be empty")
	}
	if len(user.Password) == 0 {
		return "", fmt.Errorf("password cannot be empty")
	}

	err := user.Create(ctx)
	if err != nil {
		var pgErr *pgconn.PgError
		if errors.As(err, &pgErr) {
			switch pgErr.Code {
			case pgerrcode.UniqueViolation:
				return "", fmt.Errorf("username '%s' is already taken", input.Username)
			case pgerrcode.NotNullViolation:
				if pgErr.ColumnName == "username" {
					return "", fmt.Errorf("username cannot be empty")
				}
				if pgErr.ColumnName == "password" {
					return "", fmt.Errorf("password cannot be empty")
				}
				return "", fmt.Errorf("a required field was left empty")

			case pgerrcode.StringDataRightTruncationDataException:
				if pgErr.ColumnName == "username" {
					return "", fmt.Errorf("username cannot be longer than 127 characters")
				}
				if pgErr.ColumnName == "password" {
					log.Printf("Password hash is too long for database column. Error: %v", pgErr)
					return "", fmt.Errorf("an unexpected server error occurred")
				}
				return "", fmt.Errorf("an input field is too long")

			default:
				log.Printf("Unhandled PostgreSQL error: Code=%s, Message=%s", pgErr.Code, pgErr.Message)
				return "", fmt.Errorf("an unexpected database error occurred")
			}
		}
	}

	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		log.Printf("Error creating user: %v", err)
		return "", fmt.Errorf("an unexpected error occurred")
	}
	return token, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	var user users.User
	user.Username = input.Username
	user.Password = input.Password
	correct := user.Authenticate(ctx)
	if !correct {
		return "", &users.WrongUsernameOrPasswordError{}
	}
	token, err := jwt.GenerateToken(user.Username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", fmt.Errorf("access denied")
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*model.Link, error) {
	var resultLinks []*model.Link
	var dbLinks []links.Link
	dbLinks = links.GetAll(ctx)
	for _, link := range dbLinks {
		graphqlUser := &model.User{
			ID:   link.User.ID,
			Name: link.User.Username,
		}
		resultLinks = append(
			resultLinks, &model.Link{
				ID:      link.ID,
				Title:   link.Title,
				Address: link.Address,
				User:    graphqlUser,
			})
	}
	return resultLinks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
